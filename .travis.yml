dist: xenial

sudo: false

language: cpp

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
          apt:
              sources:
                - ubuntu-toolchain-r-test
              packages:
                - cmake
                - g++-8
                - libgtest-dev
      env:
        - CC=gcc-8
        - CXX=g++-8
        - COVERAGE=false
        - ARCTK_DIR=$TRAVIS_BUILD_DIR
        - ARCTK_BUI=debug

    - os: linux
      compiler: gcc
      addons:
          apt:
              sources:
                - ubuntu-toolchain-r-test
              packages:
                - cmake
                - g++-8
                - libgtest-dev
      env:
        - CC=gcc-8
        - CXX=g++-8
        - COVERAGE=false
        - ARCTK_DIR=$TRAVIS_BUILD_DIR
        - ARCTK_BUI=release

    - os: linux
      compiler: clang
      addons:
          apt:
              sources:
                - llvm-toolchain-trusty-7.0
              packages:
                - cmake
                - clang
                - libgtest-dev
      env:
        - CC=clang
        - CXX=clang++
        - COVERAGE=false
        - ARCTK_DIR=$TRAVIS_BUILD_DIR
        - ARCTK_BUI=debug

    - os: linux
      compiler: clang
      addons:
          apt:
              sources:
                - llvm-toolchain-trusty-7.0
              packages:
                - cmake
                - clang
                - libgtest-dev
      env:
        - CC=clang
        - CXX=clang++
        - COVERAGE=false
        - ARCTK_DIR=$TRAVIS_BUILD_DIR
        - ARCTK_BUI=release

    - os: osx
      osx_image: xcode10.1
      compiler: gcc
      addons:
          brew:
              packages:
                - cmake
      env:
        - HOMEBREW_NO_AUTO_UPDATE=1
        - CC=gcc-8
        - CXX=g++-8
        - COVERAGE=false
        - ARCTK_DIR=$TRAVIS_BUILD_DIR
        - ARCTK_BUI=debug

    - os: osx
      osx_image: xcode10.1
      compiler: gcc
      addons:
          brew:
              packages:
                - cmake
      env:
        - HOMEBREW_NO_AUTO_UPDATE=1
        - CC=gcc-8
        - CXX=g++-8
        - COVERAGE=false
        - ARCTK_DIR=$TRAVIS_BUILD_DIR
        - ARCTK_BUI=release

    - os: osx
      osx_image: xcode10.1
      compiler: clang
      addons:
          brew:
              packages:
                - cmake
      env:
        - HOMEBREW_NO_AUTO_UPDATE=1
        - CC=clang
        - CXX=clang++
        - COVERAGE=true
        - ARCTK_DIR=$TRAVIS_BUILD_DIR
        - ARCTK_BUI=debug

    - os: osx
      osx_image: xcode10.1
      compiler: clang
      addons:
          brew:
              packages:
                - cmake
      env:
        - HOMEBREW_NO_AUTO_UPDATE=1
        - CC=clang
        - CXX=clang++
        - COVERAGE=false
        - ARCTK_DIR=$TRAVIS_BUILD_DIR
        - ARCTK_BUI=release

before_install:
    - |
        if [ $TRAVIS_OS_NAME = osx ]; then
            if [ $CC = gcc ]; then
                brew install gcc
                brew link gcc
            elif [ $CC = clang ]; then
                brew install llvm
                export LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"
                export PATH="/usr/local/opt/llvm/bin:$PATH"
                export LDFLAGS="-L/usr/local/opt/llvm/lib"
                export CPPFLAGS="-I/usr/local/opt/llvm/include"
            fi
        fi
    - echo $TRAVIS_OS_NAME
    - echo $CC
    - which $CC
    - $CC --version
    - echo $CXX
    - which $CXX
    - $CXX --version
    - |
        if [ $TRAVIS_OS_NAME = linux ]; then
            cd /usr/src/gtest
            cmake -DCMAKE_BUILD_TYPE=$ARCTK_BUILD_TYPE -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -std=c++17 .
            make
            cp *.a /usr/lib
            cd -
        elif [ $TRAVIS_OS_NAME = osx ]; then
            cd gtest
            cmake -DCMAKE_BUILD_TYPE=$ARCTK_BUILD_TYPE -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -std=c++17 .
            make
            make install
            cd -
        fi
    - |
        if [ $COVERAGE = true ]; then
            brew install lcov
        fi
    - cd gbench
    - cmake -DBENCHMARK_ENABLE_GTEST_TESTS=OFF -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -std=c++17 .
    - make
    - sudo make install
    - cd -

script:
    - printf "UNIT TESTING\n"
    - mkdir $ARCTK_DIR/build
    - cd $ARCTK_DIR/build
    - cmake -DCMAKE_BUILD_TYPE=$ARCTK_BUILD_TYPE -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DUNIT_TESTING=true ..
    - make
    - |
      for test in $ARCTK_DIR/bin/test/*; do
          ./$test
      done
    - cd -
    - |
      if [ $COVERAGE = true ]; then
          cd $ARCTK_DIR
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info
          bash <(curl -s https://codecov.io/bash) -t "57886efc-8eca-416f-9e8b-1b0ee825efe5" -f coverage.info || echo "Codecov did not collect coverage reports"
          cd -
      fi
    - rm -r $ARCTK_DIR/build
    - rm -r $ARCTK_DIR/bin
    - rm -r $ARCTK_DIR/include/arctk/config
    - printf "\n"
    - printf "BENCHMARKING\n"
    - mkdir $ARCTK_DIR/build
    - cd $ARCTK_DIR/build
    - cmake -DCMAKE_BUILD_TYPE=$ARCTK_BUILD_TYPE -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DBENCHMARK=true ..
    - make
    - |
      for bench in $ARCTK_DIR/bin/bench/*; do
          ./$bench
      done
    - cd -
    - rm -r $ARCTK_DIR/build
    - rm -r $ARCTK_DIR/bin
    - rm -r $ARCTK_DIR/include/arctk/config
    - printf "\n"

notifications:
  email:
    - fjmw201@exeter.ac.uk
